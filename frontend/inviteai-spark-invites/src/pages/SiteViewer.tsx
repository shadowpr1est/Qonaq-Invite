import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { toast } from 'sonner';

import { apiClient } from '@/lib/api';
import type { GeneratedSite } from '@/lib/types';
import { generateContext7Preview } from '@/lib/context7Preview';

import { LoadingSpinner } from '@/components/LoadingSpinner';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { ArrowLeft, ExternalLink, Share2, Edit, MessageCircle, Send, Sparkles, Smartphone, Monitor, Zap, Calendar, MapPin, User } from 'lucide-react';
import LivePreviewFrame from '@/components/LivePreviewFrame';

const SiteViewer = () => {
  const { siteId } = useParams<{ siteId: string }>();
  const navigate = useNavigate();
  
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [previewMode, setPreviewMode] = useState<'mobile' | 'desktop'>('desktop');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è live preview
  const [liveHtmlContent, setLiveHtmlContent] = useState('');
  const [isUpdatingPreview, setIsUpdatingPreview] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [chatMessages, setChatMessages] = useState<Array<{id: string, text: string, isUser: boolean, timestamp: Date}>>([
    {
      id: '1',
      text: 'üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-—Ä–µ–¥–∞–∫—Ç–æ—Ä. –°–∫–∞–∂–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –∏ —è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—é live preview!',
      isUser: false,
      timestamp: new Date()
    },
    {
      id: '2', 
      text: 'üí° –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥: "–°–¥–µ–ª–∞–π —Ñ–æ–Ω —è—Ä—á–µ", "–ü–æ–º–µ–Ω—è–π —à—Ä–∏—Ñ—Ç –Ω–∞ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π", "–î–æ–±–∞–≤—å –∞–Ω–∏–º–∞—Ü–∏–∏", "–ò–∑–º–µ–Ω–∏ —Ü–≤–µ—Ç–∞ –Ω–∞ —Ä–æ–∑–æ–≤—ã–µ"',
      isUser: false,
      timestamp: new Date()
    }
  ]);
  const [chatInput, setChatInput] = useState('');
  const [isProcessingChat, setIsProcessingChat] = useState(false);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞
  const { 
    data: site, 
    isLoading, 
    error 
  } = useQuery<GeneratedSite>({
    queryKey: ['site', siteId],
    queryFn: () => apiClient.getSite(siteId!),
    enabled: !!siteId,
    refetchOnWindowFocus: false,
  });

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º live content —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Å–∞–π—Ç–æ–º
  useEffect(() => {
    if (!site) return;

    if (site.html_content && site.html_content.trim().length > 20) {
      setLiveHtmlContent(site.html_content);
    } else {
      // fallback preview via Context7
      const fallback = generateContext7Preview(site);
      setLiveHtmlContent(fallback);
    }
  }, [site?.html_content]);

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ - DISABLED
  // useEffect(() => {
  //   if (site) {
  //     apiClient.recordAnalytics(site.slug, {
  //       event_type: 'page_view',
  //       event_data: {
  //         source: 'editor_preview'
  //       }
  //     });
  //   }
  // }, [site]);

  const handleShare = () => {
    if (!site) return;
    
    const shareUrl = `${window.location.origin}/sites/public/${site.slug}`;
    navigator.clipboard.writeText(shareUrl);
    toast.success('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
  };

  const handleOpenPublic = () => {
    if (!site) return;
    
    const publicUrl = `${window.location.origin}/sites/public/${site.slug}`;
    window.open(publicUrl, '_blank');
  };

  const handleChatSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!chatInput.trim() || isProcessingChat || !liveHtmlContent) return;

    const userMessage = {
      id: Date.now().toString(),
      text: chatInput,
      isUser: true,
      timestamp: new Date()
    };

    setChatMessages(prev => [...prev, userMessage]);
    const command = chatInput.toLowerCase();
    setChatInput('');
    setIsProcessingChat(true);

         // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     setIsUpdatingPreview(true);

     // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ preview (< 300ms)
     setTimeout(() => {
       let updatedHtml = liveHtmlContent;
       let responseText = '';

       // –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–∞–Ω–¥
       if (command.includes('—è—Ä—á–µ') || command.includes('—è—Ä–∫–∏–µ')) {
         updatedHtml = updatedHtml.replace(/background-color:\s*#[a-fA-F0-9]{6}/g, 'background-color: #ff6b6b');
         updatedHtml = updatedHtml.replace(/color:\s*#[a-fA-F0-9]{6}/g, 'color: #4ecdc4');
         responseText = 'üé® –°–¥–µ–ª–∞–ª —Ü–≤–µ—Ç–∞ —è—Ä—á–µ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –±–æ–ª–µ–µ —ç–Ω–µ—Ä–≥–∏—á–Ω–æ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ.';
       } else if (command.includes('–∞–Ω–∏–º–∞—Ü–∏–∏') || command.includes('–∞–Ω–∏–º–∞—Ü–∏—è')) {
         updatedHtml = updatedHtml.replace('<body', '<body style="animation: fadeIn 1s ease-in;"');
         updatedHtml = updatedHtml.replace('</head>', `
           <style>
             @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
             @keyframes bounce { 0%, 20%, 50%, 80%, 100% { transform: translateY(0); } 40% { transform: translateY(-10px); } 60% { transform: translateY(-5px); } }
             .animated { animation: bounce 2s infinite; }
           </style>
           </head>
         `);
         responseText = '‚ú® –î–æ–±–∞–≤–∏–ª –ø–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏! –¢–µ–ø–µ—Ä—å —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏.';
       } else if (command.includes('—à—Ä–∏—Ñ—Ç') || command.includes('—Ç–µ–∫—Å—Ç')) {
         updatedHtml = updatedHtml.replace(/font-family:[^;"]*/g, 'font-family: "Georgia", serif');
         responseText = 'üìù –ò–∑–º–µ–Ω–∏–ª —à—Ä–∏—Ñ—Ç –Ω–∞ –±–æ–ª–µ–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π! –¢–µ–ø–µ—Ä—å —Ç–µ–∫—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç –±–æ–ª–µ–µ —Å—Ç–∏–ª—å–Ω–æ.';
       } else if (command.includes('—Ä–æ–∑–æ–≤—ã–µ') || command.includes('—Ä–æ–∑–æ–≤—ã–π')) {
         updatedHtml = updatedHtml.replace(/background-color:\s*#[a-fA-F0-9]{6}/g, 'background-color: #ff69b4');
         updatedHtml = updatedHtml.replace(/color:\s*#[a-fA-F0-9]{6}/g, 'color: #ff1493');
         responseText = 'üíñ –ò–∑–º–µ–Ω–∏–ª —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –Ω–∞ —Ä–æ–∑–æ–≤—ã–µ —Ç–æ–Ω–∞! –û—á–µ–Ω—å –º–∏–ª–æ –∏ –Ω–µ–∂–Ω–æ.';
       } else if (command.includes('—Å—Ç–∏–ª—å') || command.includes('–¥–∏–∑–∞–π–Ω')) {
         updatedHtml = updatedHtml.replace('<body', '<body style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);"');
         responseText = 'üé≠ –û–±–Ω–æ–≤–∏–ª —Å—Ç–∏–ª—å! –î–æ–±–∞–≤–∏–ª –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞.';
       } else {
         // –û–±—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
         const responses = [
           'üöÄ –ü–æ–Ω—è–ª! –û–±–Ω–æ–≤–ª—è—é –¥–∏–∑–∞–π–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.',
           '‚ö° –ü—Ä–∏–º–µ–Ω—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
           'üéØ –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –í–Ω–æ—à—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∫–∏.',
           '‚úÖ –í—ã–ø–æ–ª–Ω—è—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. Live preview –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è!',
         ];
         responseText = responses[Math.floor(Math.random() * responses.length)];
       }

       // –û–±–Ω–æ–≤–ª—è–µ–º live preview
       setLiveHtmlContent(updatedHtml);
       setIsUpdatingPreview(false);
       
       // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI
       const response = {
         id: (Date.now() + 1).toString(),
         text: responseText,
         isUser: false,
         timestamp: new Date()
       };
       
       setChatMessages(prev => [...prev, response]);
       setIsProcessingChat(false);

       // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
       toast.success('Live Preview –æ–±–Ω–æ–≤–ª—ë–Ω!', {
         duration: 2000,
       });
       
     }, 250); // –ó–∞–¥–µ—Ä–∂–∫–∞ < 300ms –¥–ª—è "–º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ" –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <LoadingSpinner size="lg" text="–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π—Ç..." />
      </div>
    );
  }

  if (error || !site) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <Card className="max-w-md mx-auto">
          <CardContent className="p-8 text-center">
            <h2 className="text-xl font-semibold text-gray-900 mb-2">
              –°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            </h2>
            <p className="text-gray-600 mb-4">
              –í–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            </p>
            <Button onClick={() => navigate('/dashboard')}>
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (isFullscreen) {
    return (
      <div className="fixed inset-0 z-50 bg-white">
        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ */}
        <div className="absolute top-4 left-4 z-10 flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setIsFullscreen(false)}
            className="bg-white/90 backdrop-blur-sm"
          >
            <ArrowLeft className="w-4 h-4 mr-1" />
            –í—ã–π—Ç–∏
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={handleShare}
            className="bg-white/90 backdrop-blur-sm"
          >
            <Share2 className="w-4 h-4" />
          </Button>
          
          {site.is_published && (
            <Button
              variant="outline"
              size="sm"
              onClick={handleOpenPublic}
              className="bg-white/90 backdrop-blur-sm"
            >
              <ExternalLink className="w-4 h-4" />
            </Button>
          )}
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Å–∞–π—Ç–∞ */}
        <iframe
          srcDoc={liveHtmlContent}
          className="w-full h-full border-0"
          title={site.title}
          sandbox="allow-scripts allow-same-origin allow-popups allow-forms"
          key={liveHtmlContent.length}
        />
      </div>
    );
  }

  return (
    <div className="h-screen flex overflow-hidden bg-gray-50">
      {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: GPT –ß–∞—Ç (30%) */}
      <div className="w-[30%] bg-white border-r border-gray-200 flex flex-col min-h-0">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
        <div className="p-4 border-b border-gray-200 bg-gradient-to-r from-purple-600 to-blue-600">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-white/20 rounded-lg flex items-center justify-center">
                <Sparkles className="w-4 h-4 text-white" />
              </div>
              <div>
                <h2 className="text-white font-semibold">AI –†–µ–¥–∞–∫—Ç–æ—Ä</h2>
                <p className="text-white/80 text-xs">–ò–∑–º–µ–Ω—è–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º</p>
              </div>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => navigate('/dashboard')}
              className="text-white hover:bg-white/20"
            >
              <ArrowLeft className="w-4 h-4" />
            </Button>
          </div>
        </div>

        {/* –ß–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {chatMessages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-[85%] px-4 py-3 rounded-2xl text-sm leading-relaxed ${
                  message.isUser
                    ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white shadow-md'
                    : 'bg-gray-100 text-gray-800 border'
                }`}
              >
                {message.text}
                <div className={`text-xs mt-1 opacity-70`}>
                  {message.timestamp.toLocaleTimeString('ru-RU', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                  })}
                </div>
              </div>
            </div>
          ))}
          
          {isProcessingChat && (
            <div className="flex justify-start">
              <div className="bg-gray-100 border px-4 py-3 rounded-2xl text-sm">
                <div className="flex items-center gap-3">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                  <span className="text-gray-600">GPT –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...</span>
                  <Sparkles className="w-4 h-4 text-purple-500 animate-pulse" />
                </div>
              </div>
            </div>
          )}
        </div>

        {/* –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è */}
        <div className="p-4 pb-6 border-t border-gray-200 bg-gray-50">
          <form onSubmit={handleChatSubmit} className="space-y-3">
            <div className="flex gap-2">
              <Input
                value={chatInput}
                onChange={(e) => setChatInput(e.target.value)}
                placeholder={liveHtmlContent 
                  ? "–û–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: '–°–¥–µ–ª–∞–π —è—Ä—á–µ', '–ü–æ–º–µ–Ω—è–π —à—Ä–∏—Ñ—Ç', '–î–æ–±–∞–≤—å –∞–Ω–∏–º–∞—Ü–∏–∏'..."
                  : "–ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ..."
                }
                className="flex-1 border-gray-300 focus:border-purple-500"
                disabled={isProcessingChat || !liveHtmlContent}
              />
              <Button
                type="submit"
                size="sm"
                disabled={!chatInput.trim() || isProcessingChat || !liveHtmlContent}
                className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 px-4"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
          </form>
        </div>
      </div>

      {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: Live Preview (70%) */}
      <div className="w-[70%] flex flex-col min-h-0 overflow-auto">
        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é */}
        <div className="p-4 bg-white border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <h1 className="text-lg font-semibold text-gray-900">
                Live Preview
              </h1>
                             <div className="flex items-center gap-3 text-sm text-gray-600">
                 {isUpdatingPreview ? (
                   <span className="inline-flex items-center gap-1 bg-blue-100 text-blue-700 px-2 py-1 rounded-full">
                     <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                     –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...
                   </span>
                 ) : (
                   <span className="inline-flex items-center gap-1 bg-green-100 text-green-700 px-2 py-1 rounded-full">
                     <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                     Live
                   </span>
                 )}
                 
                 {site.is_published ? (
                   <span className="inline-flex items-center gap-1 bg-emerald-100 text-emerald-700 px-2 py-1 rounded-full">
                     <div className="w-2 h-2 bg-emerald-500 rounded-full"></div>
                     –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
                   </span>
                 ) : (
                   <span className="inline-flex items-center gap-1 bg-yellow-100 text-yellow-700 px-2 py-1 rounded-full">
                     <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                     –ß–µ—Ä–Ω–æ–≤–∏–∫
                   </span>
                 )}
               </div>
            </div>
            
            <div className="flex items-center gap-3">
              {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Desktop / Mobile */}
              <div className="flex gap-1 bg-gray-100 rounded-lg p-1">
                <Button
                  variant={previewMode === 'desktop' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setPreviewMode('desktop')}
                  className="px-3 py-1 h-auto text-xs"
                >
                  <Monitor className="w-4 h-4 mr-1" />
                  Desktop
                </Button>
                <Button
                  variant={previewMode === 'mobile' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setPreviewMode('mobile')}
                  className="px-3 py-1 h-auto text-xs"
                >
                  <Smartphone className="w-4 h-4 mr-1" />
                  Mobile
                </Button>
              </div>
              
              <Button
                variant="outline"
                size="sm"
                onClick={handleShare}
                className="text-purple-600 border-purple-200 hover:bg-purple-50"
              >
                <Share2 className="w-4 h-4 mr-1" />
                –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
              </Button>
              
              <Button
                size="sm"
                onClick={() => setIsFullscreen(true)}
                className="bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700"
              >
                <ExternalLink className="w-4 h-4 mr-1" />
                –û—Ç–∫—Ä—ã—Ç—å
              </Button>
            </div>
          </div>
        </div>

        {/* Live Preview –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */}
        <div className={`flex-1 bg-gray-100 p-4 overflow-visible min-h-0 flex flex-col ${
          previewMode === 'mobile' ? 'items-center' : ''
        }`}>
          <div className={`h-full bg-white rounded-lg shadow-lg overflow-hidden flex flex-col ${
            previewMode === 'mobile' ? 'max-w-sm w-full' : 'w-full'
          }`}>
            {/* –ê–¥—Ä–µ—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–∏–º—É–ª—è—Ü–∏—è */}
            <div className="bg-gray-200 px-4 py-2 flex items-center gap-3 text-xs text-gray-600 rounded-t-lg">
              <div className="flex gap-1">
                <div className="w-3 h-3 bg-red-400 rounded-full"></div>
                <div className="w-3 h-3 bg-yellow-400 rounded-full"></div>
                <div className="w-3 h-3 bg-green-400 rounded-full"></div>
              </div>
              <div className="bg-white rounded px-3 py-1 flex-1 text-gray-700">
                {site.is_published 
                  ? `invitely.app/e/${site.slug}`
                  : 'localhost:3000/preview'
                }
              </div>
            </div>
            
                             {/* –ñ–∏–≤–æ–π HTML —Å–∞–π—Ç */}
             <LivePreviewFrame
               html={liveHtmlContent}
               mode={previewMode}
               onModeChange={setPreviewMode}
               toolbar={null}
               className="h-full rounded-t-none"
               minHeight={600}
             />
          </div>
        </div>
      </div>
    </div>
  );
};

export default SiteViewer; 
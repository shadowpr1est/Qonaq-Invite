import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Optional
import logging
from pathlib import Path

from src.core.config import settings

logger = logging.getLogger(__name__)


class EmailService:
    """Email service for sending verification and notification emails"""
    
    def __init__(self):
        # Use settings from config
        self.smtp_server = settings.SMTP_HOST
        self.smtp_port = settings.SMTP_PORT
        self.sender_email = settings.SMTP_EMAIL
        self.sender_password = settings.SMTP_PASSWORD
        self.sender_name = settings.SMTP_FROM_NAME
        
    def _create_verification_code_email_html(self, user_name: str, verification_code: str) -> str:
        """Create beautiful HTML email for 6-digit verification code"""
        return f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - Invitly</title>
        </head>
        <body style="margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh;">
            <div style="max-width: 600px; margin: 0 auto; padding: 40px 20px;">
                <div style="background: white; border-radius: 16px; padding: 40px; box-shadow: 0 10px 30px rgba(0,0,0,0.1);">
                    <div style="text-align: center; margin-bottom: 30px;">
                        <h1 style="color: #6366f1; font-size: 32px; margin: 0; font-weight: 700;">‚ú® Invitly</h1>
                        <p style="color: #64748b; margin: 8px 0 0 0; font-size: 16px;">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è</p>
                    </div>
                    
                    <div style="text-align: center; margin-bottom: 30px;">
                        <div style="width: 80px; height: 80px; background: linear-gradient(135deg, #6366f1, #8b5cf6); border-radius: 50%; margin: 0 auto 20px; display: flex; align-items: center; justify-content: center;">
                            <span style="font-size: 32px;">üîê</span>
                        </div>
                        <h2 style="color: #1e293b; font-size: 24px; margin: 0 0 10px 0;">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h2>
                        <p style="color: #64748b; font-size: 16px; margin: 0;">–ü—Ä–∏–≤–µ—Ç, {user_name}! –í–æ—Ç –≤–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
                    </div>
                    
                    <div style="background: #f8fafc; border-radius: 12px; padding: 30px; margin-bottom: 30px; text-align: center;">
                        <div style="background: linear-gradient(135deg, #6366f1, #8b5cf6); color: white; font-size: 36px; font-weight: bold; letter-spacing: 8px; padding: 20px; border-radius: 12px; margin-bottom: 15px;">
                            {verification_code}
                        </div>
                        <p style="color: #475569; font-size: 14px; margin: 0;">
                            –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
                        </p>
                        <p style="color: #ef4444; font-size: 12px; margin: 10px 0 0 0;">
                            –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç
                        </p>
                    </div>
                    
                    <div style="background: #f1f5f9; border-radius: 12px; padding: 20px; margin-bottom: 20px;">
                        <p style="color: #475569; font-size: 14px; margin: 0; line-height: 1.6;">
                            –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ. 
                            –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.
                        </p>
                    </div>
                    
                    <div style="border-top: 1px solid #e2e8f0; padding-top: 20px;">
                        <p style="color: #94a3b8; font-size: 12px; margin: 0; text-align: center;">
                            –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
                            –ö–æ–º–∞–Ω–¥–∞ Invitly
                        </p>
                    </div>
                </div>
                
                <div style="text-align: center; margin-top: 20px;">
                    <p style="color: rgba(255,255,255,0.8); font-size: 12px; margin: 0;">
                        ¬© 2024 Invitly. –°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –≤–∞—à–∏—Ö –æ—Å–æ–±–µ–Ω–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤.
                    </p>
                </div>
            </div>
        </body>
        </html>
        """
        
    def _create_password_reset_code_email_html(self, user_name: str, reset_code: str) -> str:
        """Create beautiful HTML email for password reset code"""
        return f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - Invitly</title>
        </head>
        <body style="margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%); min-height: 100vh;">
            <div style="max-width: 600px; margin: 0 auto; padding: 40px 20px;">
                <div style="background: white; border-radius: 16px; padding: 40px; box-shadow: 0 10px 30px rgba(0,0,0,0.1);">
                    <div style="text-align: center; margin-bottom: 30px;">
                        <h1 style="color: #dc2626; font-size: 32px; margin: 0; font-weight: 700;">üîê Invitly</h1>
                        <p style="color: #64748b; margin: 8px 0 0 0; font-size: 16px;">–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</p>
                    </div>
                    
                    <div style="text-align: center; margin-bottom: 30px;">
                        <div style="width: 80px; height: 80px; background: linear-gradient(135deg, #dc2626, #b91c1c); border-radius: 50%; margin: 0 auto 20px; display: flex; align-items: center; justify-content: center;">
                            <span style="font-size: 32px;">üîë</span>
                        </div>
                        <h2 style="color: #1e293b; font-size: 24px; margin: 0 0 10px 0;">–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è</h2>
                        <p style="color: #64748b; font-size: 16px; margin: 0;">–ü—Ä–∏–≤–µ—Ç, {user_name}! –í–æ—Ç –≤–∞—à –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:</p>
                    </div>
                    
                    <div style="background: #fef2f2; border-radius: 12px; padding: 30px; margin-bottom: 30px; text-align: center;">
                        <div style="background: linear-gradient(135deg, #dc2626, #b91c1c); color: white; font-size: 36px; font-weight: bold; letter-spacing: 8px; padding: 20px; border-radius: 12px; margin-bottom: 15px;">
                            {reset_code}
                        </div>
                        <p style="color: #475569; font-size: 14px; margin: 0;">
                            –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
                        </p>
                        <p style="color: #ef4444; font-size: 12px; margin: 10px 0 0 0;">
                            –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç
                        </p>
                    </div>
                    
                    <div style="background: #fef2f2; border: 1px solid #fecaca; border-radius: 12px; padding: 20px; margin-bottom: 20px;">
                        <p style="color: #dc2626; font-size: 14px; margin: 0; line-height: 1.6; font-weight: 600;">
                            ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.
                        </p>
                    </div>
                    
                    <div style="border-top: 1px solid #e2e8f0; padding-top: 20px;">
                        <p style="color: #94a3b8; font-size: 12px; margin: 0; text-align: center;">
                            –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
                            –ö–æ–º–∞–Ω–¥–∞ Invitly
                        </p>
                    </div>
                </div>
                
                <div style="text-align: center; margin-top: 20px;">
                    <p style="color: rgba(255,255,255,0.8); font-size: 12px; margin: 0;">
                        ¬© 2024 Invitly. –°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –≤–∞—à–∏—Ö –æ—Å–æ–±–µ–Ω–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤.
                    </p>
                </div>
            </div>
        </body>
        </html>
        """
    
    def _create_verification_email_html(self, user_name: str, verification_link: str) -> str:
        """Create beautiful HTML email for verification (legacy method)"""
        return f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email - Invitly</title>
        </head>
        <body style="margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh;">
            <div style="max-width: 600px; margin: 0 auto; padding: 40px 20px;">
                <div style="background: white; border-radius: 16px; padding: 40px; box-shadow: 0 10px 30px rgba(0,0,0,0.1);">
                    <div style="text-align: center; margin-bottom: 30px;">
                        <h1 style="color: #6366f1; font-size: 32px; margin: 0; font-weight: 700;">‚ú® Invitly</h1>
                        <p style="color: #64748b; margin: 8px 0 0 0; font-size: 16px;">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è</p>
                    </div>
                    
                    <div style="text-align: center; margin-bottom: 30px;">
                        <div style="width: 80px; height: 80px; background: linear-gradient(135deg, #6366f1, #8b5cf6); border-radius: 50%; margin: 0 auto 20px; display: flex; align-items: center; justify-content: center;">
                            <span style="font-size: 32px;">üìß</span>
                        </div>
                        <h2 style="color: #1e293b; font-size: 24px; margin: 0 0 10px 0;">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email</h2>
                        <p style="color: #64748b; font-size: 16px; margin: 0;">–ü—Ä–∏–≤–µ—Ç, {user_name}! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥.</p>
                    </div>
                    
                    <div style="background: #f8fafc; border-radius: 12px; padding: 20px; margin-bottom: 30px;">
                        <p style="color: #475569; font-size: 14px; margin: 0; line-height: 1.6;">
                            –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç—Ä—è—Å–∞—é—â–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
                        </p>
                    </div>
                    
                    <div style="text-align: center; margin-bottom: 30px;">
                        <a href="{verification_link}" style="display: inline-block; background: linear-gradient(135deg, #6366f1, #8b5cf6); color: white; text-decoration: none; padding: 16px 32px; border-radius: 12px; font-weight: 600; font-size: 16px; transition: all 0.3s ease;">
                            üéâ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
                        </a>
                    </div>
                    
                    <div style="border-top: 1px solid #e2e8f0; padding-top: 20px;">
                        <p style="color: #94a3b8; font-size: 12px; margin: 0; text-align: center; line-height: 1.6;">
                            –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:<br>
                            <a href="{verification_link}" style="color: #6366f1; word-break: break-all;">{verification_link}</a>
                        </p>
                        <p style="color: #94a3b8; font-size: 12px; margin: 16px 0 0 0; text-align: center;">
                            –ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ Invitly, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
                        </p>
                    </div>
                </div>
                
                <div style="text-align: center; margin-top: 20px;">
                    <p style="color: rgba(255,255,255,0.8); font-size: 12px; margin: 0;">
                        ¬© 2024 Invitly. –°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –≤–∞—à–∏—Ö –æ—Å–æ–±–µ–Ω–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤.
                    </p>
                </div>
            </div>
        </body>
        </html>
        """
    
    async def send_verification_code_email(self, to_email: str, user_name: str, verification_code: str) -> bool:
        """Send 6-digit verification code email"""
        if not self.sender_email or not self.sender_password:
            logger.warning("SMTP credentials not configured. Email verification disabled.")
            logger.info(f"Email verification code for {to_email}: {verification_code}")
            return True
        
        try:
            # Create message
            message = MIMEMultipart("alternative")
            message["Subject"] = "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - Invitly üîê"
            message["From"] = self.sender_email
            message["To"] = to_email
            
            # Create HTML content
            html_content = self._create_verification_code_email_html(user_name, verification_code)
            html_part = MIMEText(html_content, "html")
            message.attach(html_part)
            
            # Create text fallback
            text_content = f"""
            –ü—Ä–∏–≤–µ—Ç, {user_name}!
            
            –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {verification_code}
            
            –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email.
            –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç.
            
            –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
            
            –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
            –ö–æ–º–∞–Ω–¥–∞ Invitly
            """
            text_part = MIMEText(text_content, "plain")
            message.attach(text_part)
            
            # Send email
            context = ssl.create_default_context()
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                server.login(self.sender_email, self.sender_password)
                server.sendmail(self.sender_email, to_email, message.as_string())
            
            logger.info(f"Verification code email sent successfully to {to_email}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send verification code email to {to_email}: {str(e)}")
            logger.info(f"Email verification code for {to_email}: {verification_code}")
            return True  # Return True in development to not block registration
    
    async def send_password_reset_code_email(self, to_email: str, user_name: str, reset_code: str) -> bool:
        """Send 6-digit password reset code email"""
        if not self.sender_email or not self.sender_password:
            logger.warning("SMTP credentials not configured. Password reset email disabled.")
            logger.info(f"Password reset code for {to_email}: {reset_code}")
            return True
        
        try:
            # Create message
            message = MIMEMultipart("alternative")
            message["Subject"] = "–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è - Invitly üîë"
            message["From"] = self.sender_email
            message["To"] = to_email
            
            # Create HTML content
            html_content = self._create_password_reset_code_email_html(user_name, reset_code)
            html_part = MIMEText(html_content, "html")
            message.attach(html_part)
            
            # Create text fallback
            text_content = f"""
            –ü—Ä–∏–≤–µ—Ç, {user_name}!
            
            –í–∞—à –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {reset_code}
            
            –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.
            –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç.
            
            –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.
            
            –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
            –ö–æ–º–∞–Ω–¥–∞ Invitly
            """
            text_part = MIMEText(text_content, "plain")
            message.attach(text_part)
            
            # Send email
            context = ssl.create_default_context()
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                server.login(self.sender_email, self.sender_password)
                server.sendmail(self.sender_email, to_email, message.as_string())
            
            logger.info(f"Password reset code email sent successfully to {to_email}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send password reset code email to {to_email}: {str(e)}")
            logger.info(f"Password reset code for {to_email}: {reset_code}")
            return True  # Return True in development to not block password reset
    
    async def send_verification_email(self, to_email: str, user_name: str, verification_token: str) -> bool:
        """Send email verification email (legacy method)"""
        if not self.sender_email or not self.sender_password:
            logger.warning("SMTP credentials not configured. Email verification disabled.")
            # In development, just log the verification link
            verification_link = f"http://98.66.137.117/verify-email?token={verification_token}"
            logger.info(f"Email verification link for {to_email}: {verification_link}")
            return True
        
        try:
            # Create verification link
            verification_link = f"http://98.66.137.117/verify-email?token={verification_token}"
            
            # Create message
            message = MIMEMultipart("alternative")
            message["Subject"] = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email - Invitly ‚ú®"
            message["From"] = self.sender_email
            message["To"] = to_email
            
            # Create HTML content
            html_content = self._create_verification_email_html(user_name, verification_link)
            html_part = MIMEText(html_content, "html")
            message.attach(html_part)
            
            # Create text fallback
            text_content = f"""
            –ü—Ä–∏–≤–µ—Ç, {user_name}!
            
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Invitly! 
            
            –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å –ø–æ —Å—Å—ã–ª–∫–µ:
            {verification_link}
            
            –ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ Invitly, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
            
            –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
            –ö–æ–º–∞–Ω–¥–∞ Invitly
            """
            text_part = MIMEText(text_content, "plain")
            message.attach(text_part)
            
            # Send email
            context = ssl.create_default_context()
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                server.login(self.sender_email, self.sender_password)
                server.sendmail(self.sender_email, to_email, message.as_string())
            
            logger.info(f"Verification email sent successfully to {to_email}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send verification email to {to_email}: {str(e)}")
            # Fallback: log the verification link
            verification_link = f"http://98.66.137.117/verify-email?token={verification_token}"
            logger.info(f"Email verification link for {to_email}: {verification_link}")
            return True  # Return True in development to not block registration
    
    async def send_welcome_email(self, to_email: str, user_name: str) -> bool:
        """Send welcome email after verification"""
        if not self.sender_email or not self.sender_password:
            logger.info(f"Welcome email would be sent to {to_email}")
            return True
        
        try:
            message = MIMEMultipart("alternative")
            message["Subject"] = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Invitly! üéâ"
            message["From"] = self.sender_email
            message["To"] = to_email
            
            html_content = f"""
            <html>
            <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                <div style="text-align: center; margin-bottom: 30px;">
                    <h1 style="color: #6366f1;">üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Invitly!</h1>
                </div>
                
                <p>–ü—Ä–∏–≤–µ—Ç, {user_name}!</p>
                
                <p>–í–∞—à email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</p>
                <ul>
                    <li>‚ú® –°–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è</li>
                    <li>üé® –í—ã–±–∏—Ä–∞—Ç—å –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —à–∞–±–ª–æ–Ω–æ–≤</li>
                    <li>üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –≥–æ—Å—Ç–µ–π</li>
                    <li>üì± –î–µ–ª–∏—Ç—å—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö</li>
                </ul>
                
                <div style="text-align: center; margin: 30px 0;">
                    <a href="http://98.66.137.117/builder" style="display: inline-block; background: linear-gradient(135deg, #6366f1, #8b5cf6); color: white; text-decoration: none; padding: 12px 24px; border-radius: 8px; font-weight: bold;">
                        –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                    </a>
                </div>
                
                <p style="color: #666; font-size: 14px;">
                    –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
                    –ö–æ–º–∞–Ω–¥–∞ Invitly
                </p>
            </body>
            </html>
            """
            
            html_part = MIMEText(html_content, "html")
            message.attach(html_part)
            
            # Send email
            context = ssl.create_default_context()
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                server.login(self.sender_email, self.sender_password)
                server.sendmail(self.sender_email, to_email, message.as_string())
            
            logger.info(f"Welcome email sent successfully to {to_email}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send welcome email to {to_email}: {str(e)}")
            return False


# Global email service instance
email_service = EmailService() 
#!/usr/bin/env python3
"""
üîß HTML Preview Generation Fix Test
==================================

Test to verify that our fixes produce proper HTML previews for iframe display
instead of raw React code.

–ü–†–û–ë–õ–ï–ú–ê: Iframe –ø–æ–∫–∞–∑—ã–≤–∞–ª React –∫–æ–¥ –∫–∞–∫ text
–†–ï–®–ï–ù–ò–ï: –†–∞–∑–¥–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –ø—Ä–µ–≤—å—é –∏ React –∫–æ–¥–∞
"""

import asyncio
import sys
import os
from pathlib import Path

# Add src directory to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from services.site_generator import SiteGeneratorService, GeneratedReactSite


async def test_html_preview_generation():
    """Test HTML preview generation vs React code generation"""
    
    print("üîß Testing HTML Preview Generation Fix")
    print("=" * 50)
    
    generator = SiteGeneratorService()
    
    # Create test site data
    site_data = GeneratedReactSite(
        title="50 –ª–µ—Ç –ê–ª–∏—à–µ—Ä",
        meta_description="–ü—Ä–∞–∑–¥–Ω—É–µ–º —é–±–∏–ª–µ–π! –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –∏ –∫–æ–ª–ª–µ–≥ –Ω–∞ —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.",
        component_name="AlisherBirthday",
        event_type="birthday",
        color_palette=["blue", "indigo", "purple"],
        theme_config={
            "primary": "blue-600",
            "secondary": "indigo-500",
            "accent": "purple-400"
        },
        animations=["bounce", "fade-in", "scale"],
        dependencies=["@types/react", "tailwindcss"]
    )
    
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è: {site_data.title}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {site_data.meta_description}")
    print(f"üé® –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: {', '.join(site_data.color_palette)}")
    
    # Test React code generation
    print("\n‚öõÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç...")
    react_code = await generator.generate_react_page(site_data)
    
    # Test HTML preview generation
    print("üåê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –ø—Ä–µ–≤—å—é...")
    html_preview = await generator.generate_html_preview(site_data)
    
    # Analyze results
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("=" * 30)
    
    # React code analysis
    react_imports = "import React" in react_code
    react_interfaces = "interface" in react_code
    react_hooks = "useState" in react_code and "useCallback" in react_code
    react_export = f"export default {site_data.component_name}" in react_code
    
    print(f"‚öõÔ∏è REACT –ö–û–î ({len(react_code)} —Å–∏–º–≤–æ–ª–æ–≤):")
    print(f"   ‚úÖ React –∏–º–ø–æ—Ä—Ç—ã: {react_imports}")
    print(f"   ‚úÖ TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: {react_interfaces}")
    print(f"   ‚úÖ React —Ö—É–∫–∏: {react_hooks}")
    print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç: {react_export}")
    
    # HTML preview analysis
    html_doctype = "<!DOCTYPE html>" in html_preview
    html_tailwind = "tailwindcss.com" in html_preview
    html_title = site_data.title in html_preview
    html_description = site_data.meta_description in html_preview
    html_animations = "animate-" in html_preview
    html_gradients = "gradient" in html_preview
    html_interactive = "onclick" in html_preview or "onsubmit" in html_preview
    
    print(f"\nüåê HTML –ü–†–ï–í–¨–Æ ({len(html_preview)} —Å–∏–º–≤–æ–ª–æ–≤):")
    print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã–π HTML: {html_doctype}")
    print(f"   ‚úÖ Tailwind CSS: {html_tailwind}")
    print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {html_title}")
    print(f"   ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {html_description}")
    print(f"   ‚úÖ –ê–Ω–∏–º–∞—Ü–∏–∏: {html_animations}")
    print(f"   ‚úÖ –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã: {html_gradients}")
    print(f"   ‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {html_interactive}")
    
    # Check content differences
    is_react_in_html = "import React" in html_preview
    is_html_in_react = "<!DOCTYPE" in react_code
    
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –†–ê–ó–î–ï–õ–ï–ù–ò–Ø:")
    print(f"   ‚ùå React –∫–æ–¥ –≤ HTML: {is_react_in_html}")
    print(f"   ‚ùå HTML –∫–æ–¥ –≤ React: {is_html_in_react}")
    
    # Save files for inspection
    output_dir = Path("preview_fix_test_output")
    output_dir.mkdir(exist_ok=True)
    
    # Save React code
    react_file = output_dir / f"{site_data.component_name}.tsx"
    with open(react_file, 'w', encoding='utf-8') as f:
        f.write(react_code)
    
    # Save HTML preview
    html_file = output_dir / f"{site_data.component_name}_preview.html"
    with open(html_file, 'w', encoding='utf-8') as f:
        f.write(html_preview)
    
    print(f"\nüíæ –§–ê–ô–õ–´ –°–û–•–†–ê–ù–ï–ù–´:")
    print(f"   üìÑ React: {react_file}")
    print(f"   üåê HTML: {html_file}")
    
    # Overall assessment
    react_quality = all([react_imports, react_interfaces, react_hooks, react_export])
    html_quality = all([html_doctype, html_tailwind, html_title, html_description])
    content_separation = not is_react_in_html and not is_html_in_react
    
    if react_quality and html_quality and content_separation:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        print("‚úÖ HTML –ø—Ä–µ–≤—å—é –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω") 
        print("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("\nüöÄ –ü–†–û–ë–õ–ï–ú–ê –° IFRAME –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
    else:
        print("\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        if not react_quality:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º")
        if not html_quality:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å HTML –ø—Ä–µ–≤—å—é")
        if not content_separation:
            print("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Ä–∞–∑–¥–µ–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def test_color_palette_handling():
    """Test color palette extraction for HTML generation"""
    
    print("\nüé® Testing Color Palette Handling")
    print("=" * 40)
    
    generator = SiteGeneratorService()
    
    test_cases = [
        {
            "name": "–°–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤",
            "palette": ["rose", "pink", "purple"],
            "expected_primary": "rose",
            "expected_secondary": "pink"
        },
        {
            "name": "–°–ª–æ–≤–∞—Ä—å —Ü–≤–µ—Ç–æ–≤",
            "palette": {"primary": "emerald", "secondary": "teal", "accent": "cyan"},
            "expected_primary": "emerald", 
            "expected_secondary": "teal"
        },
        {
            "name": "–ü—É—Å—Ç–∞—è –ø–∞–ª–∏—Ç—Ä–∞",
            "palette": [],
            "expected_primary": "purple",
            "expected_secondary": "pink"
        }
    ]
    
    for case in test_cases:
        site_data = GeneratedReactSite(
            title="–¢–µ—Å—Ç —Ü–≤–µ—Ç–æ–≤",
            meta_description="–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø–∞–ª–∏—Ç—Ä",
            component_name="ColorTest",
            event_type="test",
            color_palette=case["palette"],
            theme_config={},
            animations=[],
            dependencies=[]
        )
        
        html_preview = await generator.generate_html_preview(site_data)
        
        primary_found = case["expected_primary"] in html_preview
        secondary_found = case["expected_secondary"] in html_preview
        
        print(f"\n{case['name']}:")
        print(f"   –ü–∞–ª–∏—Ç—Ä–∞: {case['palette']}")
        print(f"   ‚úÖ Primary ({case['expected_primary']}): {primary_found}")
        print(f"   ‚úÖ Secondary ({case['expected_secondary']}): {secondary_found}")


if __name__ == "__main__":
    print("üîß HTML PREVIEW GENERATION FIX TEST")
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ iframe")
    
    asyncio.run(test_html_preview_generation())
    asyncio.run(test_color_palette_handling())
    
    print("\n" + "="*60)
    print("üìã –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("–¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç:")
    print("‚Ä¢ React –∫–æ–¥ - –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏")
    print("‚Ä¢ HTML –ø—Ä–µ–≤—å—é - –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ iframe")
    print("‚Ä¢ –†–∞–∑–¥–µ–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("="*60) 
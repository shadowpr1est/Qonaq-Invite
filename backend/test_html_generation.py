#!/usr/bin/env python3
"""
üîß HTML Generation Test
======================

Test to verify that HTML generation works correctly with variable substitution
"""

import asyncio
import sys
import os
from pathlib import Path

# Add the src directory to the path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from services.site_generator import SiteGeneratorService, GeneratedReactSite


async def test_html_generation():
    """Test HTML generation with proper variable substitution"""
    
    print("üîß Testing HTML Generation")
    print("=" * 50)
    
    generator = SiteGeneratorService()
    
    # Create test site data with realistic content
    site_data = GeneratedReactSite(
        title="–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è –ê–ª–∏—à–µ—Ä–∞",
        meta_description="–ü—Ä–∞–∑–¥–Ω—É–µ–º 50-–ª–µ—Ç–Ω–∏–π —é–±–∏–ª–µ–π! –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –∏ –∫–æ–ª–ª–µ–≥ –Ω–∞ —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.",
        component_name="AlisherBirthday",
        color_palette={"primary": "blue", "secondary": "purple"},
        theme_config={},
        event_type="birthday",
        content_details={
            "event_title": "–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è –ê–ª–∏—à–µ—Ä–∞",
            "description": "–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫! –ë—É–¥–µ—Ç –≤–µ—Å–µ–ª–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
            "event_date": "15 —è–Ω–≤–∞—Ä—è 2024",
            "event_time": "18:00",
            "event_location": "–†–µ—Å—Ç–æ—Ä–∞–Ω –¶–µ–Ω—Ç—Ä",
            "organizer_name": "–ê–ª–∏—à–µ—Ä",
            "organizer_phone": "+7 (999) 123-45-67",
            "organizer_email": "alisher@example.com",
            "dresscode": "–°–º–∞—Ä—Ç-–∫—ç–∂—É–∞–ª"
        }
    )
    
    print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è: {site_data.title}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {site_data.meta_description}")
    
    # Generate HTML
    print("\nüåê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML...")
    html = await generator.generate_html_preview(site_data)
    
    print(f"‚úÖ HTML —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # Check variable substitution
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
    checks = [
        ("–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è –ê–ª–∏—à–µ—Ä–∞", "–ó–∞–≥–æ–ª–æ–≤–æ–∫"),
        ("–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫", "–û–ø–∏—Å–∞–Ω–∏–µ"),
        ("15 —è–Ω–≤–∞—Ä—è 2024", "–î–∞—Ç–∞"),
        ("18:00", "–í—Ä–µ–º—è"),
        ("–†–µ—Å—Ç–æ—Ä–∞–Ω –¶–µ–Ω—Ç—Ä", "–ú–µ—Å—Ç–æ"),
        ("+7 (999) 123-45-67", "–¢–µ–ª–µ—Ñ–æ–Ω"),
        ("alisher@example.com", "Email"),
        ("–°–º–∞—Ä—Ç-–∫—ç–∂—É–∞–ª", "–î—Ä–µ—Å—Å-–∫–æ–¥"),
        ("bg-gradient-to-br from-blue-900", "–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞")
    ]
    
    all_passed = True
    for text, label in checks:
        if text in html:
            print(f"‚úÖ {label}: –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {label}: –ù–ï –Ω–∞–π–¥–µ–Ω - '{text}'")
            all_passed = False
    
    # Show HTML structure
    print("\nüìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ HTML:")
    lines = html.split('\n')
    for i, line in enumerate(lines[:30]):  # First 30 lines
        print(f"{i+1:2d}: {line[:100]}")
    
    if len(lines) > 30:
        print(f"... –∏ –µ—â–µ {len(lines) - 30} —Å—Ç—Ä–æ–∫")
    
    # Save to file for inspection
    output_file = Path("test_output.html")
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html)
    
    print(f"\nüíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file.absolute()}")
    
    if all_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! HTML –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.")
    
    return html


if __name__ == "__main__":
    asyncio.run(test_html_generation()) 
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;
    
    # DDoS Protection - Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=3r/s;     # Общие запросы: 3/сек
    limit_req_zone $binary_remote_addr zone=api:10m rate=2r/s;         # API: 2/сек  
    limit_req_zone $binary_remote_addr zone=auth:10m rate=1r/s;        # Авторизация: 1/сек
    limit_req_zone $binary_remote_addr zone=heavy:10m rate=30r/m;      # Тяжелые операции: 30/мин
    limit_req_zone $binary_remote_addr zone=static:10m rate=20r/s;     # Статика: 20/сек
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # Request size limits
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    client_header_buffer_size 4k;
    large_client_header_buffers 4 8k;
    
    # Upstream backend
    upstream backend {
        server backend:8000;
    }
    
    # Upstream frontend
    upstream frontend {
        server frontend:80;
    }
    
    # HTTP server (redirect to HTTPS)
    server {
        listen 80;
        server_name ${SERVER_NAME};
        
        # Block suspicious requests
        if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE|OPTIONS)$) {
            return 405;
        }
        
        return 301 https://$host$request_uri;
    }
    
    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name ${SERVER_NAME};
        
        # Connection limits
        limit_conn conn_limit_per_ip 10;
        
        # Security timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 30s;
        
        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval'" always;
        
        # API routes - Authentication (самые строгие лимиты)
        location /auth/ {
            limit_req zone=auth burst=3 nodelay;
            limit_req_status 429;
            
            # Block brute force
            if ($request_method = POST) {
                limit_req zone=heavy burst=1 nodelay;
            }
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Sites API (генерация сайтов - ресурсоемко)
        location /sites/ {
            limit_req zone=heavy burst=2 nodelay;
            limit_req_status 429;
            
            # Extra protection for POST/PUT
            if ($request_method ~ ^(POST|PUT)$) {
                limit_req zone=api burst=1 nodelay;
            }
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # User API
        location /user/ {
            limit_req zone=api burst=5 nodelay;
            limit_req_status 429;
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Health check (ограниченный доступ)
        location /health {
            limit_req zone=general burst=10 nodelay;
            
            # Only allow GET
            if ($request_method != GET) {
                return 405;
            }
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /docs {
            deny all;
            return 404;
        }
        
        location /redoc {
            deny all;
            return 404;
        }
        
        # Static files (более мягкие лимиты)
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp)$ {
            limit_req zone=static burst=50 nodelay;
            
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Cache headers
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Frontend routes (HTML pages)
        location / {
            limit_req zone=general burst=10 nodelay;
            limit_req_status 429;
            
            # Block common attack patterns
            if ($request_uri ~* "(\.\./|\.\.\\|\.\.%2f|\.\.%5c)") {
                return 403;
            }
            
            if ($query_string ~* "(union|select|insert|delete|update|drop|create|alter)") {
                return 403;
            }
            
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
} 